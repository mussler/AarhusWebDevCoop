@inherits Umbraco.Web.Macros.PartialViewMacroPage
@helper Truncate(string input, int length)
{
if (input.Length <= length)
{
        @Html.Raw(input)
}
else {
        @Html.Raw(input.Substring(0, length))<text>...</text>
}
}
@{
    int pageSize = 8;
    if (Model.MacroParameters["contentPerPage"] == null)
    {
        pageSize = Convert.ToInt32(Model.MacroParameters["contentPerPage"]);
    }
    int columnSize = 4;
    if (pageSize < 3)
    {
        columnSize = 12 / pageSize;
    }
    String css_class = "col-lg-" + columnSize + " col-md-" + columnSize + " col-sm-" + columnSize + " col-xs-12";

    var page = 1; int.TryParse(Request.QueryString["page"], out page);
    var items = Umbraco.TypedContent(Model.Content.Id).Children.Where(x => x.DocumentTypeAlias == "articleItem").OrderByDescending(x => x.CreateDate);
    var totalPages = (int)Math.Ceiling((double)items.Count() / (double)pageSize);
    if (page > totalPages)
    {
        page = totalPages;
    }
    else if (page < 1)
    {
        page = 1;
    }
    <div class="container-fluid">
        <div class="row">
            @foreach (var item in items.Skip((page - 1) * pageSize).Take(pageSize))
            {
                <div class="@css_class">
                    <h2>@item.GetPropertyValue("articleTitle")</h2>
                    <small style="display: block; line-height: 1.428571429; color: #999;">
                        <cite title="@library.FormatDateTime(item.CreateDate.ToString(), "dd MMMM yy")">
                            @library.FormatDateTime(item.CreateDate.ToString(), "dd MMMM yy")
                            <i class="glyphicon glyphicon-calendar">
                            </i>
                        </cite>
                    </small>
                    @{ String articleContent = item.GetPropertyValue("articleContent").ToString(); }
                    <p>@Truncate(articleContent, 240)<a href="@library.NiceUrl(item.Id)">read more</a>
                    </p>
                </div>
                        }
        </div>
    </div>
                        if (totalPages > 1)
                        {
                            <nav class="navbar navbar-default">

                                <div class="container-fluid">
                                    <ul class="nav navbar-nav">
                                        @if (page > 1)
                                        {
                                            <li><a href="?page=@(page-1)">Prev</a></li>
                                        }
                                        @for (int p = 1; p < totalPages + 1; p++)
                                        {
                                            <li class="@(p == page ? "active" : string.Empty)">
                                                <a href="?page=@p">Page @p</a>
                                            </li>
                                        }
                                        @if (page < totalPages)
                                        {
                                            <li><a href="?page=@(page+1)">Next</a></li>
                                        }
                                    </ul>
                                </div>
                            </nav>
                        }
}
